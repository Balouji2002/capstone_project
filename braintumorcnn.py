# -*- coding: utf-8 -*-
"""BrainTumorCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VEFolwyXvyo30qx0q416vQgRm8YZshFV

**1. Import all the necessary libraries for the project**
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import cv2
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tqdm import tqdm
import os
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint
from sklearn.metrics import classification_report,confusion_matrix
import ipywidgets as widgets
import io
from PIL import Image
from IPython.display import display,clear_output
from warnings import filterwarnings
from IPython.display import display, HTML
from tensorflow.keras.preprocessing.image import load_img, img_to_array

"""We start looking at the data, and transforming all images to a same
size of 150 pixels, and appending all the sized images to the new X_train list. Then, we convert the list into a np array.

"""

labels = ['glioma_tumor', 'no_tumor', 'meningioma_tumor', 'pituitary_tumor']
image_size = 150

X_train = []
y_train = []


# Loop through both training and testing directories
for directory in ['Training', 'Testing']:
    for label in labels:
        folderPath = os.path.join('./capstone_project', directory, label)

        # Iterate through image files in the folder
        for filename in tqdm(os.listdir(folderPath)):
            img_path = os.path.join(folderPath, filename)

            # Append the image and label to the lists
            X_train.append(img_path)
            y_train.append(label)

# Convert the lists to NumPy arrays
X_train = np.array(X_train)
y_train = np.array(y_train)

"""Let's take a look at the Brain MRI images, with the help of the matplot library."""

fig, ax = plt.subplots(1,4,figsize=(20,20))

fig.text(s='Sample Image from each Possible Outcome', size=18, fontweight='normal',
         fontname='cmb10', color="#313131", y=0.65, x=0.40, alpha=0.8)

image_displayed = 0
for label in labels:
  j = 0
  while j < len(X_train):
    if y_train[j] == label:
      img = Image.open(X_train[j])
      ax[image_displayed].imshow(img)
      ax[image_displayed].set_title(label)
      ax[image_displayed].axis('off')
      image_displayed += 1
      break

    j +=1